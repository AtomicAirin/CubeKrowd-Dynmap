name: TEST Quadrant 2 Flat

on:
  workflow_dispatch:

jobs:
  update-dynmap-images:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install dynmap_lens google-auth google-auth-oauthlib google-api-python-client

    - name: Create or clear assets directory
      run: |
        mkdir -p assets
        rm -f assets/*

    - name: Capture region
      run: |
        timestamp=$(date +"%Y-%m-%d-%H-%M-%S")
        dynmap-lens.py -v https://dynmap.cubekrowd.net/ survival flat [2532,64,-2532] [40,40] 1 assets/Q2-suFlat-${timestamp}.png

    - name: Crop image
      run: |
        python <<EOF
        from PIL import Image
        import os

        # Prevent PIL error for large images
        Image.MAX_IMAGE_PIXELS = 933120000

        # Locate the captured image
        input_dir = "assets"
        for filename in os.listdir(input_dir):
            if filename.endswith(".png"):
                input_path = os.path.join(input_dir, filename)

                # Open the image and apply cropping (adjust cropping values as needed)
                with Image.open(input_path) as img:
                    width, height = img.size
                    cropped = img.crop((64, 0, width, height))
                    cropped.save(input_path)
        EOF

    - name: Upload to Google Drive
      env:
        GDRIVE_KEY: ${{ secrets.GDRIVE_SERVICE_ACCOUNT }}
      run: |
        echo "$GDRIVE_KEY" > /tmp/service_account.json

        python <<EOF
        import os
        from google.oauth2.service_account import Credentials
        from googleapiclient.discovery import build
        from googleapiclient.http import MediaFileUpload

        # Authenticate with the service account
        credentials = Credentials.from_service_account_file('/tmp/service_account.json')
        drive_service = build('drive', 'v3', credentials=credentials)

        # Define the folder ID (replace with your folder ID)
        folder_id = "1cbUN2hhnB7euzZ3HmVcUjXq-Ve4pT6rV"

        # Upload files
        for filename in os.listdir('assets'):
            file_metadata = {'name': filename, 'parents': [folder_id]}
            media = MediaFileUpload(f'assets/{filename}', mimetype='image/png')
            drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()
        EOF
